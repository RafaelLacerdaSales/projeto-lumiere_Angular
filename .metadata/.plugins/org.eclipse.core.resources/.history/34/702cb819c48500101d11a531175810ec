package com.lumiere.project.infra;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.lumiere.project.repositories.UsersRepositories;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class SecurityFilter extends OncePerRequestFilter {

	@Autowired
	TokenService tokenService;

	@Autowired
	UsersRepositories userRepository;

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		System.out.println("SecurityFilter interceptou: " + request.getRequestURI());

		String path = request.getServletPath();

		// Ignora endpoints p√∫blicos
		if (path.equals("/login/validar") || path.equals("/usuario/cadastrar")) {
			System.out.println("SecurityFilter interceptou: " + request.getRequestURI());
			filterChain.doFilter(request, response);
			return;
		}

		var token = recoverToken(request);
		if (token != null && !token.isBlank()) {
			var email = tokenService.validateToken(token);
			if (!email.isBlank()) {
				UserDetails user = userRepository.findByEmail(email);
				var authentication = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
				SecurityContextHolder.getContext().setAuthentication(authentication);
			}
		}

		filterChain.doFilter(request, response);
	}

	private String recoverToken(HttpServletRequest request) {
		var authHeader = request.getHeader("Authorization");
		if (authHeader == null || !authHeader.startsWith("Bearer "))
			return null;
		return authHeader.replace("Bearer ", "");
	}
}
