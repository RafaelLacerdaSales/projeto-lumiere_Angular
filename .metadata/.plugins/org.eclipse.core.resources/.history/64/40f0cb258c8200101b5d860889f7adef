package com.lumiere.project.Controllers;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lumiere.project.entities.UsersEntities;
import com.lumiere.project.repositories.UsersRepositories;

import jakarta.validation.constraints.NotBlank;

@RestController
@RequestMapping("/usuario")
public class UsersControllers {

	@Autowired
	private UsersRepositories repository;

	@GetMapping
	public List<UsersEntities> listUsers() {
		return repository.findAll();
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@PostMapping
	public ResponseEntity<Map<String, String>> criarUsuario(@RequestBody @NotBlank UsersEntities user, BindingResult result, Model model) {
		 
	       if (result.hasErrors()) { //com o notblank caso ele mande o erro, o hasError que é da classe bindin result
	    	                         //pega esse erro automaticamente
	      
	       }

		try {
			UsersEntities novoUser = repository.save(user);
			// retorno 201 Created + mensagem
			return ResponseEntity.ok().body(Map.of("Sucesso", "Usuario cadastrado"));
		} catch (DataIntegrityViolationException e) {
	           // CAPTURA O ERRO DE EMAIL DUPLICADO
			return ResponseEntity.badRequest().body(Map.of("error", "Este email já está cadastrado! Use outro email."));
	       } catch (Exception e) {
	    	   return ResponseEntity
	                   .status(HttpStatus.INTERNAL_SERVER_ERROR)
	                   .body(Map.of("error", "Erro inesperado: " + e.getMessage()));
	       }

	}

	@CrossOrigin(origins = "http://localhost:4200")
	@DeleteMapping("/{id}")
	public String deletarUsuario(@PathVariable Long id) {
		try {
			repository.deleteById(id);
			return "Usuario deletado com sucesso";
		} catch (Exception e) {
			return "não foi possível deletar o usuario " + e.getMessage();
		}
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@PostMapping("/validar")
	public String validarLogin(@RequestBody UsersEntities user) {
		try {
			 List<UsersEntities> users = repository.findByNome(user.getNome());
			 List<UsersEntities> senha = repository.findBySenha(user.getSenha());
			
			 
			 
			return "usuario ou senha não encontrados";

		} catch (Exception e) {
			return "Erro não pegou";
		} 
	}

}
